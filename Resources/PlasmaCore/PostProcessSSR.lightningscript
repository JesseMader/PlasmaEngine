// MIT Licensed (see LICENSE.md).

class PostProcessSSR : LightningComponent
{
    [Property] var Active : Boolean = true;
    
    [Group("Settings")]
    [Property]
    var RayDistance : Real = 128.0;
    
    [Group("Settings")]
    [Property]
    var StepDistance : Real = 0.01;
    
    [Group("Settings")]
    [Property]
    var RoughnessCutoff : Real = 0.85;
    
    [Group("Settings")]
    [Property]
    var RoughnessBlur : Real = 2;
    
    [Group("Settings")]
    [Property]
    var Jitter : Boolean = true;
    
    [Group("Settings")]
    [Property]
    var HalfRes : Boolean = true;
    
    [Group("Debug")]
    [Property]
    var Debug : Boolean = false;
    
    function AddSSRRenderTasks(event : RenderTasksEvent, geometryBuffer0 : RenderTarget, geometryBuffer1 : RenderTarget, screenBuffer : RenderTarget, ssrBuffer : RenderTarget)
    {
        if(this.Active == false)
            return;
            
        var ssrRenderSize = event.ViewportSize;
        if(this.HalfRes)
            ssrRenderSize = ssrRenderSize/ 2;
            
        var ssrTemp : RenderTarget = event.GetRenderTarget(ssrRenderSize, TextureFormat.RGBA8);
   
        event.AddRenderTaskClearTarget(ssrTemp, Real4.Zero);
                   
        var postSSR  = SSR();
        postSSR.GeometryBuffer0 = geometryBuffer0.Texture;
        postSSR.GeometryBuffer1 = geometryBuffer1.Texture;
        postSSR.ScreenBuffer = screenBuffer.Texture;
        postSSR.RoughnessCutoff = this.RoughnessCutoff;
        postSSR.Debug = this.Debug;
        postSSR.EnvironmentBrdfLut = Texture.EnvironmentBrdfLut;
        postSSR.Jiiter = this.Jitter;
        postSSR.Itteractions = this.RayDistance;
        postSSR.StepDistance = this.StepDistance;
        
        event.AddRenderTaskPostProcess(ssrTemp, postSSR, "SSR");
        
        var blurSSR = event.GetRenderTarget(ssrRenderSize, TextureFormat.RGBA16f);
        
        var copySSR = CopyTarget();
        copySSR.Texture = ssrTemp.Texture;
        event.AddRenderTaskPostProcess(blurSSR, copySSR, "SSRCopy");        
        BlurTextureEdgeSafe[BilateralBlurRadius25].Call(event, blurSSR, geometryBuffer0, 8, this.RoughnessBlur);
        
        if(this.HalfRes)
          this.Upsample(event, ssrTemp, ssrBuffer);

        if(!this.Debug)
        {
            
          var ssrApply = SSRApply();
          ssrApply.GeometryBuffer0 = geometryBuffer0.Texture;
          ssrApply.GeometryBuffer1 = geometryBuffer1.Texture;
          ssrApply.SSRBuffer = ssrBuffer.Texture;
          ssrApply.SSRBlurBuffer = blurSSR.Texture;
          ssrApply.ScreenBuffer = screenBuffer.Texture;
          event.AddRenderTaskPostProcess(screenBuffer, ssrApply, "SSRApply");
          
          
          event.AddRenderTaskClearTarget(ssrBuffer, Real4.Zero);
        }
      
        
        if(this.Debug)
        {
          var copyPass = CopyTarget();
          copyPass.Texture = ssrTemp.Texture;
          event.AddRenderTaskPostProcess(screenBuffer, copyPass, "SSRDebug");
          
          event.AddRenderTaskClearTarget(ssrBuffer, Real4.Zero);
        }
        
        var ssrFinalCopy = SSRCopy();
        ssrFinalCopy.Texture = screenBuffer.Texture;
        event.AddRenderTaskPostProcess(screenBuffer, ssrFinalCopy, "ssrFinalCopy");
        
        ssrTemp.Release();
        blurSSR.Release();
    }
    
    function Upsample(event : RenderTasksEvent, target0 : RenderTarget, target1 : RenderTarget)
    {
      var upsampleSettings = RenderSettings();
      upsampleSettings.ColorTarget = target1;
      
      upsampleSettings.BlendSettings.BlendMode = BlendMode.Separate;
      upsampleSettings.BlendSettings.BlendEquation = BlendEquation.Add;
      upsampleSettings.BlendSettings.SourceFactor = BlendFactor.One;
      upsampleSettings.BlendSettings.DestFactor = BlendFactor.One;
      upsampleSettings.BlendSettings.SourceFactorAlpha = BlendFactor.Plasma;
      upsampleSettings.BlendSettings.DestFactorAlpha = BlendFactor.One;
      
      var copyTarget = CopyTarget();    
      copyTarget.Texture = target0.Texture;
      event.AddRenderTaskPostProcess(upsampleSettings, copyTarget, "Upscale");
    }
  }
