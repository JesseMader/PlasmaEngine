// MIT Licensed (see LICENSE.md).

// Outputs lighting values used by LightPass for a point light source.
[Pixel]
struct PointLightFragment
{
  [AppBuiltInInput] var WorldToView : Real4x4;
  [AppBuiltInInput] var ViewToWorld : Real4x4;
  [AppBuiltInInput] var ObjectWorldPosition : Real3;
  
  [StageInput] var PerspectivePosition : Real4;
  
  [FragmentInput] var GeoNormal : Real3;
  [FragmentInput] var GeoPosition : Real3;
  
  // Distance at which the light's effect is completely faded.
  // Does not affect apparent brightness of the light.
  [Input] var FalloffRadius : Real = 1.0;
  
  // Combined with area light falloff and represents total emittance of the light.
  [Input][Output] var LightIntensity : Real = 1.0;
  // Physical radius of the sphere of light.
  // Affects the shape of specular reflection.
  [Input][Output] var LightRadius : Real = 0.0;
  [Input][Output] var LightLength : Real = 0.0;
  [Input][Output] var LightDirection : Real3;
  [Output] var LightDistance : Real;
  
  function  IlluminanceSphere(cosTheta : Real, sinSigmaSqr : Real) : Real
  {
    var sinTheta = Math.Sqrt(1.0 - cosTheta * cosTheta);
    
    var illuminance = 0.0;
    
    if(cosTheta * cosTheta > sinSigmaSqr)
    {
      illuminance = Math.Pi * sinSigmaSqr * Math.Saturate(cosTheta);
    }
    else
    {
      var x = Math.Sqrt(1.0 / sinSigmaSqr - 1.0);
      var y = -x * (cosTheta / sinTheta);
      var sinThetaSqrtY = sinTheta * Math.Sqrt(1.0 - y * y);
      illuminance = (cosTheta * Math.ACos(y) - x * sinThetaSqrtY) * sinSigmaSqr + Math.ATan(sinThetaSqrtY / x);
    }

    return illuminance;
  }
  
  function Main()
  {
    var viewPosition = this.GeoPosition;
    var viewDirection = Math.Normalize(-viewPosition);
    var lightPosition = Math.MultiplyPoint(this.WorldToView, this.ObjectWorldPosition);
    
    var reflection = Math.ReflectAcrossVector(viewDirection, this.GeoNormal);
    var toLight = lightPosition - viewPosition;
    
    var closestPoint = Real3.Zero;
    
    if(this.LightLength > 0.0)
    {
      var length = this.ObjectWorldPosition * this.LightLength;
      var l0 = toLight - 0.5 * length;
      var l1 = toLight + 0.5 * length;
      
      var ld = l1 - l0;
      var dotRL0 = Math.Dot(reflection, l0);
      var dotRLD = Math.Dot(reflection, ld);
      var dotL0LD = Math.Dot(l0, ld);
      var distLD = Math.Length(ld);
      
      var t = (dotRL0 * dotRLD - dotL0LD) / (distLD * distLD - dotRLD * dotRLD);
      closestPoint = l0 + ld * Math.Saturate(t);
      var centerToRay = Math.ProjectOnVector(closestPoint, reflection) - closestPoint;
      closestPoint = closestPoint + centerToRay * Math.Saturate(this.LightRadius / Math.Length(centerToRay));
      
    }
    else
    {
      var sqrDist = Math.Dot(toLight, toLight);
      var cosTheta = Math.Clamp(Math.Dot(this.GeoNormal, this.LightDirection), -0.99, 0.99);
      
      var sqrLightRadius = this.LightRadius * this.LightRadius;
      var sinSigmaSqr = Math.Min(sqrLightRadius / sqrDist, 0.9999);
      //this.LightIntensity *=
      
      
      var centerToRay = Math.ProjectOnVector(toLight, reflection) - toLight;
      closestPoint = toLight + centerToRay * Math.Saturate(this.LightRadius / Math.Length(centerToRay));
    }

    var falloffDistance = Math.Length(toLight);
    var falloff = Math.Saturate(1.0 - Math.Pow(falloffDistance / this.FalloffRadius, 4.0));
    falloff = (falloff * falloff) / (falloffDistance * falloffDistance + 1.0);
    
    this.LightDirection = Math.Normalize(closestPoint);
    this.LightIntensity *= falloff;
    
    var intensityMultiplier = 100.0;
    if(this.LightRadius > 0)
      intensityMultiplier = 4.0 / Math.Pow(this.LightRadius, 2.0);
    
    this.LightIntensity /= intensityMultiplier;
    
    this.LightDistance = Math.Length(closestPoint);
  }
}

// Outputs lighting values used by LightPass for a spot light source.
[Pixel]
struct SpotLightFragment
{
  [AppBuiltInInput] var WorldToView : Real4x4;
  [AppBuiltInInput] var ObjectWorldPosition : Real3;
  
  [StageInput] var PerspectivePosition : Real4;
  
  [FragmentInput] var GeoNormal : Real3;
  [FragmentInput] var GeoPosition : Real3;
  
  [FragmentInput] var ShadowFactor : Real = 1.0;
  
  // Distance at which the light's effect is completely faded.
  // Does not affect apparent brightness of the light.
  [Input] var FalloffRadius : Real = 1.0;
  // Precalculated cosines of spot light angles. (cos(outer/2), cos(inner/2) - cos(outer/2)).
  [Input] var SpotAngles : Real2 = Real2(0.5);
  
  // Combined with area light falloff and represents total emittance of the light.
  [Input][Output] var LightIntensity : Real = 1.0;
  // Physical radius of the sphere of light.
  // Affects the shape of specular reflection.
  [Input][Output] var LightRadius : Real = 0.0;
  // Direction the light is facing, given in world space.
  [Input][Output] var LightDirection : Real3 = Real3(0.0 , -1.0, 0.0);
  [Output] var LightDistance : Real;
  
  function Main()
  {
    var viewPosition = this.GeoPosition;
    var viewDirection = Math.Normalize(-viewPosition);
    var lightPosition = Math.MultiplyPoint(this.WorldToView, this.ObjectWorldPosition);
    
    var reflection = Math.ReflectAcrossVector(viewDirection, this.GeoNormal);
    var toLight = lightPosition - viewPosition;
    var centerToRay = Math.ProjectOnVector(toLight, reflection) - toLight;
    var closestPoint = toLight + centerToRay * Math.Saturate(this.LightRadius / Math.Length(centerToRay));
    
    var falloffDistance = Math.Length(toLight);
    var falloff = Math.Saturate(1.0 - Math.Pow(falloffDistance / this.FalloffRadius, 4.0));
    falloff = (falloff * falloff) / (falloffDistance * falloffDistance + 1.0);
    
    var lightDir = Math.Normalize(Math.MultiplyNormal(this.WorldToView, this.LightDirection));
    var cosAngle = Math.Saturate(Math.Dot(Math.Normalize(-toLight), lightDir));
    var spotFalloff = Math.Pow(Math.Saturate((cosAngle - this.SpotAngles.X) / this.SpotAngles.Y), 2.0);
    
    falloff *= spotFalloff;
    
    this.LightDirection = Math.Normalize(closestPoint);
    this.LightIntensity *= falloff * this.ShadowFactor;
    
    var intensityMultiplier = 100.0;
    if(this.LightRadius > 0)
      intensityMultiplier = 4.0 / Math.Pow(this.LightRadius, 2.0);
    
    this.LightIntensity /= intensityMultiplier;
    
    this.LightDistance = Math.Length(closestPoint);
  }
}

// Outputs lighting values used by LightPass for a directional light source.
[Pixel]
struct DirectionalLightFragment
{
  [AppBuiltInInput] var WorldToView : Real4x4;
  
  [FragmentInput] var ShadowFactor : Real = 1.0;
  
  // Arbitrary scalar for the resultant lighting calculations.
  [Input][Output] var LightIntensity : Real = 1.0;
  // Direction the light is facing, given in world space.
  [Input][Output] var LightDirection : Real3 = Real3(0.0 , -1.0, 0.0);
  
  function Main()
  {
    this.LightIntensity /= 1000;
    this.LightIntensity *= this.ShadowFactor;
    this.LightDirection = Math.Normalize(-Math.MultiplyNormal(this.WorldToView, this.LightDirection));
  }
}
